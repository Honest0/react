// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ReactFreshBabelPlugin generates signatures for function declarations calling hooks 1`] = `

export default function App() {
  const [foo, setFoo] = useState(0);
  React.useEffect(() => {});
  return <h1>{foo}</h1>;
}

__signature__(App, "useState{[foo, setFoo]}\\nuseEffect{}");

_c = App;

var _c;

__register__(_c, "App");
`;

exports[`ReactFreshBabelPlugin generates signatures for function expressions calling hooks 1`] = `

export const A = _c3 = React.memo(_c2 = React.forwardRef(_c = __signature__((props, ref) => {
  const [foo, setFoo] = useState(0);
  React.useEffect(() => {});
  return <h1 ref={ref}>{foo}</h1>;
}, "useState{[foo, setFoo]}\\nuseEffect{}")));

export const B = _c6 = React.memo(_c5 = React.forwardRef(_c4 = __signature__(function (props, ref) {
  const [foo, setFoo] = useState(0);
  React.useEffect(() => {});
  return <h1 ref={ref}>{foo}</h1>;
}, "useState{[foo, setFoo]}\\nuseEffect{}")));

function hoc() {
  return __signature__(function Inner() {
    const [foo, setFoo] = useState(0);
    React.useEffect(() => {});
    return <h1 ref={ref}>{foo}</h1>;
  }, "useState{[foo, setFoo]}\\nuseEffect{}");
}

export let C = hoc();

var _c, _c2, _c3, _c4, _c5, _c6;

__register__(_c, "A$React.memo$React.forwardRef");

__register__(_c2, "A$React.memo");

__register__(_c3, "A");

__register__(_c4, "B$React.memo$React.forwardRef");

__register__(_c5, "B$React.memo");

__register__(_c6, "B");
`;

exports[`ReactFreshBabelPlugin generates valid signature for exotic ways to call Hooks 1`] = `

import FancyHook from 'fancy';

export default function App() {
  function useFancyState() {
    const [foo, setFoo] = React.useState(0);
    useFancyEffect();
    return foo;
  }

  __signature__(useFancyState, 'useState{[foo, setFoo]}\\nuseFancyEffect{}', true);

  const bar = useFancyState();
  const baz = FancyHook.useThing();
  React.useState();
  useThePlatform();
  return <h1>{bar}{baz}</h1>;
}

__signature__(App, 'useFancyState{bar}\\nuseThing{baz}\\nuseState{}\\nuseThePlatform{}', true, () => [FancyHook.useThing]);

_c = App;

var _c;

__register__(_c, 'App');
`;

exports[`ReactFreshBabelPlugin ignores HOC definitions 1`] = `

let connect = () => {
  function Comp() {
    const handleClick = () => {};
    return <h1 onClick={handleClick}>Hi</h1>;
  }
  return Comp;
};
function withRouter() {
  return function Child() {
    const handleClick = () => {};
    return <h1 onClick={handleClick}>Hi</h1>;
  };
};
`;

exports[`ReactFreshBabelPlugin ignores complex definitions 1`] = `

let A = foo ? () => {
  return <h1>Hi</h1>;
} : null;
const B = function Foo() {
  return <h1>Hi</h1>;
}();
let C = () => () => {
  return <h1>Hi</h1>;
};
let D = bar && (() => {
  return <h1>Hi</h1>;
});
`;

exports[`ReactFreshBabelPlugin ignores higher-order functions that are not HOCs 1`] = `

const throttledAlert = throttle(function () {
  alert('Hi');
});
const TooComplex = function () {
  return hello;
}(() => {});
if (cond) {
  const Foo = thing(() => {});
}
`;

exports[`ReactFreshBabelPlugin ignores unnamed function declarations 1`] = `

export default function () {}
`;

exports[`ReactFreshBabelPlugin includes custom hooks into the signatures 1`] = `

function useFancyState() {
  const [foo, setFoo] = React.useState(0);
  useFancyEffect();
  return foo;
}

__signature__(useFancyState, "useState{[foo, setFoo]}\\nuseFancyEffect{}", false, () => [useFancyEffect]);

const useFancyEffect = () => {
  React.useEffect(() => {});
};

__signature__(useFancyEffect, "useEffect{}");

export default function App() {
  const bar = useFancyState();
  return <h1>{bar}</h1>;
}

__signature__(App, "useFancyState{bar}", false, () => [useFancyState]);

_c = App;

var _c;

__register__(_c, "App");
`;

exports[`ReactFreshBabelPlugin only registers pascal case functions 1`] = `

function hello() {
  return 2 * 2;
}
`;

exports[`ReactFreshBabelPlugin registers capitalized identifiers in HOC calls 1`] = `

function Foo() {
  return <h1>Hi</h1>;
}

_c = Foo;
export default _c2 = hoc(Foo);
export const A = _c3 = hoc(Foo);
const B = _c4 = hoc(Foo);

var _c, _c2, _c3, _c4;

__register__(_c, "Foo");

__register__(_c2, "%default%");

__register__(_c3, "A");

__register__(_c4, "B");
`;

exports[`ReactFreshBabelPlugin registers identifiers used in JSX at definition site 1`] = `

import A from './A';
import Store from './Store';

Store.subscribe();

const Header = _c = styled.div\`color: red\`;
const Factory = funny.factory\`\`;

let Alias1 = A;
let Alias2 = A.Foo;
const Dict = {};

function Foo() {
  return <div><A /><B /><Alias1 /><Alias2 /><Header /><Dict.X /></div>;
}

_c2 = Foo;
const B = _c3 = hoc(A);
// This is currently registered as a false positive:
const NotAComponent = _c4 = wow(A);
// We could avoid it but it also doesn't hurt.

var _c, _c2, _c3, _c4;

__register__(_c, 'Header');

__register__(_c2, 'Foo');

__register__(_c3, 'B');

__register__(_c4, 'NotAComponent');
`;

exports[`ReactFreshBabelPlugin registers identifiers used in React.createElement at definition site 1`] = `

import A from './A';
import Store from './Store';

Store.subscribe();

const Header = _c = styled.div\`color: red\`;
const Factory = funny.factory\`\`;

let Alias1 = A;
let Alias2 = A.Foo;
const Dict = {};

function Foo() {
  return [React.createElement(A), React.createElement(B), React.createElement(Alias1), React.createElement(Alias2), jsx(Header), React.createElement(Dict.X)];
}

_c2 = Foo;
React.createContext(Store);

const B = _c3 = hoc(A);
// This is currently registered as a false positive:
const NotAComponent = _c4 = wow(A);
// We could avoid it but it also doesn't hurt.

var _c, _c2, _c3, _c4;

__register__(_c, 'Header');

__register__(_c2, 'Foo');

__register__(_c3, 'B');

__register__(_c4, 'NotAComponent');
`;

exports[`ReactFreshBabelPlugin registers likely HOCs with inline functions 1`] = `

const A = _c2 = forwardRef(_c = function () {
  return <h1>Foo</h1>;
});
const B = _c5 = memo(_c4 = React.forwardRef(_c3 = () => {
  return <h1>Foo</h1>;
}));
export default _c8 = React.memo(_c7 = forwardRef(_c6 = (props, ref) => {
  return <h1>Foo</h1>;
}));

var _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;

__register__(_c, "A$forwardRef");

__register__(_c2, "A");

__register__(_c3, "B$memo$React.forwardRef");

__register__(_c4, "B$memo");

__register__(_c5, "B");

__register__(_c6, "%default%$React.memo$forwardRef");

__register__(_c7, "%default%$React.memo");

__register__(_c8, "%default%");
`;

exports[`ReactFreshBabelPlugin registers likely HOCs with inline functions 2`] = `

export default _c3 = React.memo(_c2 = forwardRef(_c = function (props, ref) {
  return <h1>Foo</h1>;
}));

var _c, _c2, _c3;

__register__(_c, "%default%$React.memo$forwardRef");

__register__(_c2, "%default%$React.memo");

__register__(_c3, "%default%");
`;

exports[`ReactFreshBabelPlugin registers likely HOCs with inline functions 3`] = `

export default _c3 = React.memo(_c2 = forwardRef(_c = function Named(props, ref) {
  return <h1>Foo</h1>;
}));

var _c, _c2, _c3;

__register__(_c, "%default%$React.memo$forwardRef");

__register__(_c2, "%default%$React.memo");

__register__(_c3, "%default%");
`;

exports[`ReactFreshBabelPlugin registers top-level exported function declarations 1`] = `

export function Hello() {
  function handleClick() {}
  return <h1 onClick={handleClick}>Hi</h1>;
}

_c = Hello;
export default function Bar() {
  return <Hello />;
}

_c2 = Bar;
function Baz() {
  return <h1>OK</h1>;
}

_c3 = Baz;
const NotAComp = 'hi';
export { Baz, NotAComp };

export function sum() {}
export const Bad = 42;

var _c, _c2, _c3;

__register__(_c, 'Hello');

__register__(_c2, 'Bar');

__register__(_c3, 'Baz');
`;

exports[`ReactFreshBabelPlugin registers top-level exported named arrow functions 1`] = `

export const Hello = () => {
  function handleClick() {}
  return <h1 onClick={handleClick}>Hi</h1>;
};

_c = Hello;
export let Bar = props => <Hello />;

_c2 = Bar;
export default (() => {
  // This one should be ignored.
  // You should name your components.
  return <Hello />;
});

var _c, _c2;

__register__(_c, "Hello");

__register__(_c2, "Bar");
`;

exports[`ReactFreshBabelPlugin registers top-level function declarations 1`] = `

function Hello() {
  function handleClick() {}
  return <h1 onClick={handleClick}>Hi</h1>;
}

_c = Hello;
function Bar() {
  return <Hello />;
}
_c2 = Bar;

var _c, _c2;

__register__(_c, "Hello");

__register__(_c2, "Bar");
`;

exports[`ReactFreshBabelPlugin registers top-level variable declarations with arrow functions 1`] = `

let Hello = () => {
  const handleClick = () => {};
  return <h1 onClick={handleClick}>Hi</h1>;
};
_c = Hello;
const Bar = () => {
  return <Hello />;
};
_c2 = Bar;
var Baz = () => <div />;
_c3 = Baz;
var sum = () => {};

var _c, _c2, _c3;

__register__(_c, "Hello");

__register__(_c2, "Bar");

__register__(_c3, "Baz");
`;

exports[`ReactFreshBabelPlugin registers top-level variable declarations with function expressions 1`] = `

let Hello = function () {
  function handleClick() {}
  return <h1 onClick={handleClick}>Hi</h1>;
};
_c = Hello;
const Bar = function Baz() {
  return <Hello />;
};
_c2 = Bar;
function sum() {}
let Baz = 10;
var Qux;

var _c, _c2;

__register__(_c, "Hello");

__register__(_c2, "Bar");
`;

exports[`ReactFreshBabelPlugin uses original function declaration if it get reassigned 1`] = `

function Hello() {
  return <h1>Hi</h1>;
}
_c = Hello;
Hello = connect(Hello);

var _c;

__register__(_c, "Hello");
`;
